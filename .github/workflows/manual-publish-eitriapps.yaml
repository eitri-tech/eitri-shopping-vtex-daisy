name: Manual Publish Eitri Apps

on:
  workflow_dispatch:
    inputs:
      modules_to_process:
        description: 'Lista de m√≥dulos separados por v√≠rgula (ex: eitri-app-1,eitri-app-2)'
        required: true
        type: string
      env_id:
        description: 'ID do ambiente para publicar ou "none" para n√£o publicar'
        required: true
        type: choice
        options:
          - 'DEV'
          - 'PROD'
          - 'N√£o publicar'
env:
  EITRI_CLI_CLIENT_ID: ${{ secrets.EITRI_CLI_CLIENT_ID }}
  EITRI_CLI_CLIENT_SECRET: ${{ secrets.EITRI_CLI_CLIENT_SECRET }}

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      DEV_ID: '55761c57-81bb-4189-999c-38b12ed14956'
      PROD_ID: '2ddcf3e5-3bd3-492e-82b3-4830a0674636'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Eitri CLI
        run: npm install -g eitri-cli

      - name: Install yq v4 locally
        run: |
          mkdir -p $HOME/bin
          curl -L https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -o $HOME/bin/yq
          chmod +x $HOME/bin/yq
          echo "$HOME/bin" >> $GITHUB_PATH
          yq --version

          steps:
      - name: Map env_id
        id: map
        run: |
          case "${{ github.event.inputs.env_id }}" in
            DEV)
              echo "ENV_UUID=${DEV_ID}" >> "$GITHUB_ENV"
              ;;
            PROD)
              echo "ENV_UUID=${PROD_ID}" >> "$GITHUB_ENV"
              ;;
            N√£o publicar)
              echo "ENV_UUID=none" >> "$GITHUB_ENV"
              ;;
            *)
              echo "Ambiente inv√°lido" >&2
              exit 1
              ;;
          esac

      - name: Usar o ENV_UUID
        run: |
          echo "Publicando no ambiente: $ENV_UUID"
      
      - name: Process selected modules
        run: |
          set -e
          set -x
          trap 'echo "‚ùå Falha no processamento dos eitri-apps!"' ERR

          IFS=',' read -ra MODULES <<< "${{ github.event.inputs.modules_to_process }}"

          for module in "${MODULES[@]}"; do
            module=$(echo "$module" | xargs)  # remove espa√ßos extras
            echo "üöÄ Processando eitri-app: [$module]"

            if [ ! -d "$module" ]; then
              echo "‚ö†Ô∏è Diret√≥rio $module n√£o encontrado. Pulando..."
              continue
            fi

            cd $module

            NORMALIZED_MODULE=$(printf '%s' "$module" | tr -d '\r\n')
            echo "‚úÖ Normalized eitri-app: [$NORMALIZED_MODULE]"

            echo "‚úÖ Todos os paths em app-config.yaml:"
            yq eval '.eitri-apps[].path' ../app-config.yaml

            SHARED=$(yq eval '.eitri-apps[] | select(.path | sub("^\\./"; "") == "'"$NORMALIZED_MODULE"'") | .shared' ../app-config.yaml)

            echo "üîç Valor de SHARED para $module: [$SHARED]"

            if [[ "${SHARED,,}" == "true" ]]; then
              echo "üîó Eitri-app $module √© compartilhado. Executando 'eitri push-version --shared'"
              eitri push-version --shared
            else
              echo "üîó Eitri-app $module n√£o √© compartilhado. Executando 'eitri push-version'"
              eitri push-version
            fi

            if [[ "${{ github.event.inputs.env_id }}" != "none" ]]; then
              echo "üì¶ Publicando com 'eitri publish -e ${{ github.event.inputs.env_id }}'"
              eitri publish -e ${{ github.event.inputs.env_id }}
            else
              echo "üö´ Publica√ß√£o desativada conforme sele√ß√£o de 'n√£o publicar'."
            fi

            cd -
            echo "‚úÖ Finalizado processamento do eitri-app: $module"
          done
